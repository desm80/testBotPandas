import asyncio
import logging
import os
from datetime import datetime
from pathlib import Path

import pandas as pd
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import (SimpleRequestHandler,
                                            setup_application)
from aiohttp import web
from dotenv import load_dotenv

import constants
from db import create_link, parse_links

load_dotenv()
router = Router()
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("TOKEN")
BASE_DIR = Path(__file__).parent

WEB_SERVER_HOST = "127.0.0.1"
WEB_SERVER_PORT = 5000
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = "my-secret"
BASE_WEBHOOK_URL = "https://aiogram.dev/"


class UploadFile(StatesGroup):
    waiting_for_file = State()
    processing_file = State()


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """
    –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä, –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –°–¢–ê–†–¢.
    """
    try:
        await message.bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ {e}")
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª",
        callback_data=constants.UPLOAD_FILE
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–∞–π—Ç–∞–º",
            callback_data=constants.AVERAGE_PRICE
        )
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëáüèª",
        reply_markup=builder.as_markup()
    )
    await state.set_state(UploadFile.waiting_for_file)


@router.callback_query(F.data == constants.UPLOAD_FILE, UploadFile.waiting_for_file)
async def upload_file(callback: types.CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞.
    """
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")
    await state.set_state(UploadFile.processing_file)
    await callback.answer()


@router.callback_query(F.data == constants.AVERAGE_PRICE)
async def average_price(callback: types.CallbackQuery):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑—é–∑—é–±–ª–∏–∫–∞ –ø–æ —Å–∞–π—Ç–∞–º.
    """
    await callback.message.answer("–í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É.....")
    sites_price = parse_links()
    for site, price in sites_price.items():
        await callback.message.answer(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑—é–∑—é–±–ª–∏–∫–∞ –¥–ª—è —Å–∞–π—Ç–∞ {site} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price}")
    await callback.answer()


@router.message(F.document, UploadFile.processing_file)
async def processing_file(message: types.Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞.
    """
    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...")
    if not message.document.file_name.endswith(".xlsx"):
        await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ excel —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!")
    else:
        file = await message.bot.download(message.document)
        try:
            directory = BASE_DIR / 'document'
            os.makedirs(directory, exist_ok=True)
            filename = f'testfile-{datetime.now().strftime("%d-%m-%Y %H-%M-%S")}.xlsx'
            filepath = os.path.join(directory, filename)
            with open(filepath, 'wb') as f:
                f.write(file.getvalue())
        except Exception as e:
            logging.error(e)
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        df = pd.read_excel(file)
        rows, cols = df.shape
        for i in range(rows):
            result = []
            for j in range(cols):
                result.append(df.iloc[i, j])
            if create_link(result):
                await message.answer(
                    f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\ntitle -  {result[0]}\nurl - {result[1]}\nxpath - {result[2]}"
                    f"\n–û–Ω–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            else:
                await message.answer(f"–í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await state.clear()


async def main():
    bot = Bot(TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.include_router(router)
    logging.info("Starting bot")
    await dp.start_polling(bot, drop_pending_updates=True)


# async def on_startup():
#     await bot.set_webhook(f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}", secret_token=WEBHOOK_SECRET)

# async def on_shutdown():
#     await bot.delete_webhook()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("Bot stopped!")

    # dp = Dispatcher()
    # dp.include_router(router)
    # dp.startup.register(on_startup)
    # dp.shutdown.register(on_shutdown)
    # bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    # app = web.Application()
    # webhook_requests_handler = SimpleRequestHandler(
    #     dispatcher=dp,
    #     bot=bot,
    #     secret_token=WEBHOOK_SECRET,
    # )
    # webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    # setup_application(app, dp, bot=bot)
    # web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
